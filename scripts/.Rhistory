library(devtools)
devtools::load_all(pkg="~/Documents/workspace/pcawg-germline/analyses/deletion-mutation-density/pcawg.common")
library(pcawg.common)
library(GenomicFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(rtracklayer)
library(org.Hs.eg.db)
library(COSMIC.67)
library(calibrate)
library(biomaRt)
library(ggplot2)
library(ggrepel)
library(ggbio)
library(BSgenome.Hsapiens.1000genomes.hs37d5)
library(icd)
#Read in metadata
sample_meta = get_pcawg_metadata("~/Downloads/pcawg_data/sample_metadata/pcawg_summary.tsv",
"~/Downloads/pcawg_data/sample_metadata/PCAWG Excluded Donors%2FSamples - Excluded_donors_2016_08_30.tsv", split_multi_tumors = F)
sample_meta = keep_first_of_multi_tumors(sample_meta)
clinical_meta = get_clinical_metadata("~/Downloads/pcawg_data/clinical_metadata/pcawg_donor_clinical_August2016_v6.tsv", sample_meta)
hist_meta = get_histology_metadata("~/Downloads/pcawg_data/clinical_metadata/pcawg_specimen_histology_August2016_v6.tsv", sample_meta)
sample_column_list = c("donor_unique_id", "normal_wgs_aliquot_id",
"tumor_wgs_aliquot_id", "dcc_project_code")
clinical_column_list = c("donor_sex", "donor_vital_status", "donor_diagnosis_icd10",
"donor_age_at_diagnosis", "donor_survival_time",
"first_therapy_type", "first_therapy_response",
"donor_interval_of_last_followup", "tobacco_smoking_history_indicator",
"tobacco_smoking_intensity", "alcohol_history")
hist_column_list = c("organ_system", "histology_abbreviation",
"histology_tier1", "histology_tier2",
"histology_tier3", "histology_tier4",
"tumour_histological_code", "tumour_histological_type",
"tumour_stage", "tumour_grade",
"percentage_cellularity", "level_of_cellularity")
donor_meta = cbind(sample_meta[,sample_column_list],
clinical_meta[,clinical_column_list],
hist_meta[,hist_column_list])
rm(sample_meta, sample_column_list, clinical_meta, clinical_column_list, hist_meta, hist_column_list)
#Load germline deletions data
load("~/Downloads/pcawg_data/dels.Rdata")
#load("~/Downloads/pcawg_data/germline_deletions/dels_chr22.Rdata")
set_deletion_range_ends(deletions)
deletion_genotypes = geno(deletions)$GT[,match(donor_meta$normal_wgs_aliquot_id, colnames(geno(deletions)$GT))]
#Load somatic SNV data
load("~/Downloads/pcawg_data/snv_samples.Rdata")
#load("~/Downloads/pcawg_data/snv_sample_ranges.Rdata")
#snv_samples = snv_ranges
#load("~/Downloads/pcawg_data/snv_samples_chr22.Rdata")
snv_samples = snv_samples[na.omit(match(donor_meta$tumor_wgs_aliquot_id, names(snv_samples)))]
#Detect and remove samples that are missing deletions or SNV calls
missing_sample_indices = c(which(is.na(colnames(deletion_genotypes))),
which(is.na(names(snv_samples))))
donor_meta = donor_meta[-missing_sample_indices,]
deletion_genotypes = deletion_genotypes[,-missing_sample_indices]
snv_samples = snv_samples[-missing_sample_indices]
colnames(deletion_genotypes) = donor_meta$donor_unique_id
names(snv_samples) = donor_meta$donor_unique_id
#Compute matrix with 1 for heterozygous carriers of a deletion, 0 for non-carriers (hom ref), and NA for others
deletion_carrier_mask = get_het_carrier_mask(deletion_genotypes)
#Number of het carriers per deletion
carrier_counts = rowSums(deletion_carrier_mask, na.rm = T)
donor_deletion_counts = colSums(deletion_carrier_mask, na.rm = T)
carrier_summary = as.data.table(table(carrier_counts))
carrier_summary[,carrier_counts := as.numeric(carrier_counts)]
del_widths =  width(ranges(deletion_ranges))
deletion_ranges = rowRanges(deletions)
del_widths =  width(ranges(deletion_ranges))
snv_counts = unlist(lapply(snv_samples, length))
snv_samples = snv_samples[match(donor_meta$tumor_wgs_aliquot_id, names(snv_samples))]
library(ggplot2)
library(plyr)
library(data.table)
analysis_runs = read.table("/Users/siakhnin/Documents/workspace/pcawg-germline/analyses/freebayes-job-durations/freebayes_discovery_regenotype.csv", header=T, sep="\t", stringsAsFactors = F)
analysis_runs$created_date = strptime(analysis_runs$created_date, "%Y-%m-%d %H:%M:%S")
analysis_runs$run_start_date = strptime(analysis_runs$run_start_date, "%Y-%m-%d %H:%M:%S")
analysis_runs$run_end_date = strptime(analysis_runs$run_end_date, "%Y-%m-%d %H:%M:%S")
difftime(analysis_runs$run_end_date, analysis_runs$run_start_date,unit="mins")
chroms = fread("/Users/siakhnin/Documents/workspace/pcawg-germline/analyses/freebayes-job-durations/chroms.csv")
colnames(chroms)[3] = "basepairs"
chroms$basepairs = as.numeric(gsub(",", "", chroms$basepairs))
task_instances = fread("/Users/siakhnin/Documents/workspace/pcawg-germline/analyses/freebayes-job-durations/freebayes-discovery-regenotype-job-durations.tsv")
task_instances$duration = task_instances$duration/60
task_instances$chr = factor(gsub("freebayes_(.*)", "\\1", task_instances$task_id), levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","X","Y"))
task_instances = task_instances[order(chr)]
ggplot(task_instances, aes(x=reorder(task_id, duration, FUN=median), y=duration, fill=task_id)) + geom_boxplot() +  coord_cartesian(ylim = c(0, 350)) + xlab("Chromosome") + ylab("Duration (mins)") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
sum_stats_discovery_regenotype = ddply(task_instances,~task_id,summarise,mean=mean(duration),median=median(duration),sd=sd(duration), min=min(duration), max=max(duration))
sum_stats_discovery_regenotype = sum_stats_discovery_regenotype[match(chroms$Chromosome, gsub("freebayes_(.*)", "\\1", sum_stats_discovery_regenotype$task_id)),]
cor(as.numeric(sum_stats_discovery_regenotype$mean), chroms$basepairs)
ggplot(task_instances, aes(duration, colour = task_id)) +
geom_density() + facet_wrap(~chr, ncol=3, scales="free") + coord_cartesian(xlim=c(0,350)) + guides(color = guide_legend(ncol=1))
write.table(bed, bed.file, sep = "\t", col.names = FALSE, row.names = FALSE, quote = F)
## gene target regions
library(biomaRt)
library(intervals)
exon.ext = 50
target.genes = c("GCKR", "BRCA1", "BRCA2", "PALB2", "FANCD2", "MBD4")
bed.file = "targets.bed"
ensembl = useMart(biomart = "ENSEMBL_MART_ENSEMBL", host = "grch37.ensembl.org", path = "/biomart/martservice", dataset = "hsapiens_gene_ensembl")
query1 = getBM(attributes = c("chromosome_name", "exon_chrom_start", "exon_chrom_end", "ensembl_gene_id", "ensembl_exon_id"), filters = "biotype", values = "protein_coding", mart = ensembl)
query1 = query1[query1$chromosome_name %in% c(1:22, "X", "Y"),]
query2 = getBM(attributes = c("external_gene_name", "ensembl_gene_id", "gene_biotype", "source"), filters = "biotype", values = "protein_coding", mart = ensembl)
e = merge(query1, query2, by = "ensembl_gene_id", all.x = TRUE)
e$id = paste0(e$chromosome_name, "_", e$exon_chrom_start, "_", e$exon_chrom_end)
e = e[!duplicated(e$id),]
e.target = e[e$external_gene_name %in% target.genes,]
e.target.list = split(e.target[,2:4], e.target$chromosome_name)
bed = do.call(rbind, lapply(e.target.list, function(x) data.frame(x[1,1], reduce(Intervals(cbind(x[,2] - exon.ext, x[,3] + exon.ext))))))
write.table(bed, bed.file, sep = "\t", col.names = FALSE, row.names = FALSE, quote = F)
library(ggplot2)
library(VariantAnnotation)
library(data.table)
library(devtools)
library(GenomicFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(rtracklayer)
library(org.Hs.eg.db)
library(COSMIC.67)
library(calibrate)
library(biomaRt)
library(ggplot2)
library(ggrepel)
library(BSgenome.Hsapiens.1000genomes.hs37d5)
gckr_vep = fread("~/Documents/workspace/sbg/tcga_normals_grch37_gckr_genotypes.vep")
gckr_vep = fread("~/Documents/workspace/sbg/tcga_normals_grch37_gckr_genotypes.vep", sep="\t")
summary(gckr_vep)
gckr_vep[Consequence == "stop_gain"]
gckr_vep[Consequence == "stop_gain_variant"]
gckr_vep[Consequence == "stop_gained"]
gckr_vep[Consequence == "stop_gained", Location]
unique(gckr_vep[Consequence == "stop_gained", Location])
unique(gckr_vep[Consequence == "stop_lost", Location])
gckr_vep[Consequence == "stop_lost", Location
]
gckr_vep[Consequence == "stop_gained"]
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
ch = import.chain("~/Downloads/pcawg_data/external_data/hg19ToGRCh37.over.chain")
genes_grch37 = liftOver(genes(txdb), ch)
genes_grch37
gene_hit_details = select(org.Hs.eg.db, gckr_vep$Gene, c("SYMBOL", "GENENAME"))
gckr_vep$Gene
unique(gckr_vep$Gene)
gene_hit_details = select(org.Hs.eg.db, unique(gckr_vep$Gene), c("SYMBOL", "GENENAME"))
gene_hit_details
ensembl = useMart(biomart = "ENSEMBL_MART_ENSEMBL", host = "grch37.ensembl.org", path = "/biomart/martservice", dataset = "hsapiens_gene_ensembl")
gene_info = getBM(attributes=c('ensembl_gene_id',
'ensembl_transcript_id','hgnc_symbol','chromosome_name','start_position','end_position'), filters = 'ensembl_gene_id', values = unique(gckr_vep$Gene), mart = ensembl)
gene_info
gene_info = getBM(attributes=c('ensembl_gene_id',
'ensembl_transcript_id','hgnc_symbol','chromosome_name','start_position','end_position'), filters = 'ensembl_gene_id', values = '2646', mart = ensembl)
gene_info
gene_info = getBM(attributes=c('ensembl_gene_id',
'ensembl_transcript_id','hgnc_symbol','chromosome_name','start_position','end_position'), filters = 'entrez_gene_id', values = '2646', mart = ensembl)
listFilters(ensembl)
grep(listFilters(ensembl), "entrez")
grep("entrez", listFilters(ensembl))
listFilters(ensembl)
?grep
grep("entrez", listFilters(ensembl))
grep("asdasd", listFilters(ensembl))
grep("entrez", listFilters(ensembl))
grep("entrez", listFilters(ensembl)$description)
listFilters(ensembl)$description
grep("gene", listFilters(ensembl)$description)
listFilters(ensembl)$description[grep("gene", listFilters(ensembl)$description)]
gene_info = getBM(attributes=c('ensembl_gene_id',
'ensembl_transcript_id','hgnc_symbol','chromosome_name','start_position','end_position'), filters = 'entrezgene', values = '2646', mart = ensembl)
gene_info
gckr_vep[Consequence=="stop_gained"]
unique(gckr_vep[Consequence=="stop_gained", Location])
table(gckr_vep[Consequence=="stop_gained", Location]
)
table(gckr_vep[Consequence=="stop_gained", .(Location, Allele)])
table(gckr_vep[Consequence=="frameshift_variant", .(Location, Allele)])
library(xtable)
xtable(table(gckr_vep[Consequence=="frameshift_variant", .(Location, Allele)]))
library(grdExtra)
library(gridExtra)
grid.table(table(gckr_vep[Consequence=="frameshift_variant", .(Location, Allele)]))
grid.table(table(gckr_vep[Consequence=="stop_gained", .(Location, Allele)]))
grid.table(table(gckr_vep[Consequence=="stop_gained", .(Location, Allele)]))
(table(gckr_vep[Consequence=="stop_gained", .(Location, Allele)])
)
gckr_vep_2 = fread("~/Documents/workspace/sbg/tcga_normals_grch37_gckr_brca1_brca2_palb2_fancd2_mbd4_genotypes.vep", sep="\t")
grid.table(table(gckr_vep_2[Consequence=="stop_gained", .(Location, Allele)]))
table(gckr_vep_2[Consequence=="stop_gained", .(Location, Allele)])
table(gckr_vep_2[Consequence=="stop_gained", .(Location, Allele, Gene)])
gckr_vep_2[Consequence=="stop_gained", .(Location, Allele, Gene)]
gene_info = getBM(attributes=c('ensembl_gene_id',
'ensembl_transcript_id','hgnc_symbol','chromosome_name','start_position','end_position'), filters = 'entrezgene', values = gckr_vep$Gene, mart = ensembl)
gene_info
gene_info = getBM(attributes=c("entrezgene", 'ensembl_gene_id',
'ensembl_transcript_id','hgnc_symbol','chromosome_name','start_position','end_position'), filters = 'entrezgene', values = gckr_vep$Gene, mart = ensembl)
gene_info
gene_info = getBM(attributes=c("entrezgene", 'ensembl_gene_id',
'ensembl_transcript_id','hgnc_symbol'), filters = 'entrezgene', values = gckr_vep$Gene, mart = ensembl)
gene_info
gene_info = getBM(attributes=c("entrezgene", 'ensembl_gene_id',
'ensembl_transcript_id','hgnc_symbol'), filters = 'entrezgene', values = gckr_vep_2$Gene, mart = ensembl)
gene_info
gene_info = getBM(attributes=c("external_gene_name", "entrezgene", 'ensembl_gene_id',
'ensembl_transcript_id','hgnc_symbol'), filters = 'entrezgene', values = gckr_vep_2$Gene, mart = ensembl)
gene_info
class(gene_info)
dim(gckr_vep_2)
gckr_vep_2$Gene
gene_info = getBM(attributes=c("external_gene_name", "entrezgene", 'ensembl_gene_id',
'ensembl_transcript_id','hgnc_symbol'), filters = 'entrezgene', values = unique(gckr_vep_2$Gene), mart = ensembl)
gene_info
gene_info[gene_info$entrezgene == gckr_vep_2$Gene]
merge(gckr_vep_2, gene_info)
class(gene_info)
gene_info = as.data.table(gene_info)
class(gene_info)
gene_info
setkey(gene_info, entrezgene)
setkey(gckr_vep_2, Gene)
merge(gene_info, gckr_vep_2)
merge(gene_info, gckr_vep_2, all=True
)
merge(gene_info, gckr_vep_2, by.x="entrezgene", by.y="Gene")
gene_info$entrezgene
gene_info$entrezgene = as.character(gene_info$entrezgene)
merge(gene_info, gckr_vep_2, by.x="entrezgene", by.y="Gene")
gckr_vep_2[gene_info]
table(gckr_vep_2[Consequence=="stop_gained", .(Location, Allele, gene_info[entrezgene == Gene]$external_gene_name)])
gckr_vep_2[Consequence=="stop_gained", .(Location, Allele, gene_info[entrezgene == Gene]$external_gene_name)]
gckr_vep_2[Consequence=="stop_gained", .(Location, Allele, gene_info[Gene]$external_gene_name)]
table(gckr_vep_2[Consequence=="stop_gained", .(Location, Allele, Gene)])
gckr_vep_2[Consequence=="stop_gained", .(Location, Allele, Gene)]
gckr_vep_2[Consequence=="stop_gained", .(Location, Allele, Gene)]$Gene
table(gckr_vep_2[Consequence=="stop_gained", .(Location, Allele)])
table(gckr_vep_2[Consequence=="frameshift_variant", .(Location, Allele)])
table(gckr_vep_2[Consequence=="stop_gained", .(Location, Allele)])
table(gckr_vep_2[Consequence=="stop_gained", .(Location)])
table(gckr_vep_2[Consequence=="stop_gained", .(Gene)])
table(gckr_vep_2[Consequence=="frameshift_variant", .(Gene)])
source("https://bioconductor.org/biocLite.R")
BiocUpgrade()
biocLite()
biocLite("BiocUpgrade")
library(data.table)
library(ggplot2)
library(scales)
library(fasttime)
elapsed_time_by_quantiles_2 <- function(data, num_quantiles, col_name){
max_val = data[which(get(col_name) == max(get(col_name), na.rm=T)), col_name, with=F][1]
bins = seq(0,num_quantiles)
chunks =  bins * (max_val[[1]]/num_quantiles)
chunk_indices = unlist(lapply(chunks, function(x) which.min(abs(unlist(data[,col_name, with=F]) - x))))
max_time = as.numeric(data[which(get(col_name) == max(get(col_name), na.rm=T)), Date][1] - data[get(col_name) == 0, Date])
elapsed_times = as.numeric(data[chunk_indices, Date] - data[get(col_name) == 0, Date]) * 100 / max_time
return(data.table(bins, elapsed_times, col_name))
}
elapsed_time_by_quantiles <- function(data, num_quantiles, col_name){
max_val = data[which(get(col_name) == max(get(col_name), na.rm=T)), col_name, with=F][1][[1]]
max_val_index = which(data[,get(col_name)] == max_val)[1]
min_val = 0
max_time = as.numeric(data[which(get(col_name) == max(get(col_name), na.rm=T)), Date][1] - data[get(col_name) == 0, Date])
val_indices = which(!is.na(data[1:max_val_index,get(col_name)]))
percent_samples = data[val_indices, get(col_name)] * 100 / max_val
percent_times = as.numeric(data[val_indices, Date] - data[get(col_name) == 0, Date]) * 100 / max_time
intermediate = data.table(percent_samples, percent_times)
result = as.data.table(do.call(rbind, transpose(approx(intermediate$percent_samples, intermediate$percent_times, seq(0, 100, 100 / num_quantiles)))))
setnames(result,c("bins", "elapsed_times"))
result[,Pipeline:=col_name]
return(result)
}
#blah = elapsed_time_by_quantiles_2(prog, 100, "OxoG")
make_non_decreasing <- function(my_vec){
val = 0
for(i in seq_along(my_vec)){
if(!(is.na(my_vec[i]) || is.na(val))){
if(my_vec[i] < val){
my_vec[i] = val
}else{
val = my_vec[i]
}
}
}
return(my_vec)
}
prog = fread("../data/pcawg_progress_sept_2016.csv")
prog$Date = as.Date(prog$Date, "%y-%m-%d")
prog$OxoG[586] = 0
col_list = c("BWA", "Sanger", "DKFZ/EMBL", "Broad", "OxoG")
for(el in col_list){
prog[,el := make_non_decreasing(prog[,get(el),]), with=F]
}
prog[which(apply(prog, MARGIN =2, FUN=duplicated), arr.ind = T)] = NA
#col_list = c("OxoG")
times = lapply(col_list, function(x) elapsed_time_by_quantiles(prog, 100, x))
long_times = do.call(rbind, times)
setnames(long_times, "col_name", "Pipeline")
ggplot(long_times, aes(x=elapsed_times, y=bins, colour=Pipeline)) +
geom_line() +
xlab("Percent Runtime Elapsed") +
ylab("Percent Samples Complete") +
guides(col = guide_legend(title = "Pipeline")) +
theme(legend.background = element_rect(colour = "black"),
legend.position=c(0.80,0.15),
axis.title = element_text(face="bold", size=16, family="Arial"),
legend.text=element_text(size=14, family="Arial"),
legend.title = element_text(size=18, family="Arial"),
axis.text = element_text(size=10)) +
geom_segment(x=0,y=0,xend=100,yend=100, linetype="dashed", colour="gray59") +
annotate("text", x=51, y=48, angle=45, label="Ideal Trajectory", colour="gray22",family="Arial") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
prog2 = melt(prog, id.vars=c("Date"), measure.vars = c("BWA", "Sanger", "DKFZ/EMBL", "Broad", "OxoG"), na.rm=T)
ggplot(prog2, aes(x=Date, y=value, colour=variable)) +
geom_line() +
scale_x_date("", labels=date_format("%b-%Y")) + ylab("# Donors")
setwd("~/Google Drive/Research/projects/Butler/paper/scripts")
library(data.table)
library(ggplot2)
library(scales)
library(fasttime)
elapsed_time_by_quantiles_2 <- function(data, num_quantiles, col_name){
max_val = data[which(get(col_name) == max(get(col_name), na.rm=T)), col_name, with=F][1]
bins = seq(0,num_quantiles)
chunks =  bins * (max_val[[1]]/num_quantiles)
chunk_indices = unlist(lapply(chunks, function(x) which.min(abs(unlist(data[,col_name, with=F]) - x))))
max_time = as.numeric(data[which(get(col_name) == max(get(col_name), na.rm=T)), Date][1] - data[get(col_name) == 0, Date])
elapsed_times = as.numeric(data[chunk_indices, Date] - data[get(col_name) == 0, Date]) * 100 / max_time
return(data.table(bins, elapsed_times, col_name))
}
elapsed_time_by_quantiles <- function(data, num_quantiles, col_name){
max_val = data[which(get(col_name) == max(get(col_name), na.rm=T)), col_name, with=F][1][[1]]
max_val_index = which(data[,get(col_name)] == max_val)[1]
min_val = 0
max_time = as.numeric(data[which(get(col_name) == max(get(col_name), na.rm=T)), Date][1] - data[get(col_name) == 0, Date])
val_indices = which(!is.na(data[1:max_val_index,get(col_name)]))
percent_samples = data[val_indices, get(col_name)] * 100 / max_val
percent_times = as.numeric(data[val_indices, Date] - data[get(col_name) == 0, Date]) * 100 / max_time
intermediate = data.table(percent_samples, percent_times)
result = as.data.table(do.call(rbind, transpose(approx(intermediate$percent_samples, intermediate$percent_times, seq(0, 100, 100 / num_quantiles)))))
setnames(result,c("bins", "elapsed_times"))
result[,Pipeline:=col_name]
return(result)
}
#blah = elapsed_time_by_quantiles_2(prog, 100, "OxoG")
make_non_decreasing <- function(my_vec){
val = 0
for(i in seq_along(my_vec)){
if(!(is.na(my_vec[i]) || is.na(val))){
if(my_vec[i] < val){
my_vec[i] = val
}else{
val = my_vec[i]
}
}
}
return(my_vec)
}
prog = fread("../data/pcawg_progress_sept_2016.csv")
prog$Date = as.Date(prog$Date, "%y-%m-%d")
prog$OxoG[586] = 0
col_list = c("BWA", "Sanger", "DKFZ/EMBL", "Broad", "OxoG")
for(el in col_list){
prog[,el := make_non_decreasing(prog[,get(el),]), with=F]
}
prog[which(apply(prog, MARGIN =2, FUN=duplicated), arr.ind = T)] = NA
#col_list = c("OxoG")
times = lapply(col_list, function(x) elapsed_time_by_quantiles(prog, 100, x))
long_times = do.call(rbind, times)
setnames(long_times, "col_name", "Pipeline")
ggplot(long_times, aes(x=elapsed_times, y=bins, colour=Pipeline)) +
geom_line() +
xlab("Percent Runtime Elapsed") +
ylab("Percent Samples Complete") +
guides(col = guide_legend(title = "Pipeline")) +
theme(legend.background = element_rect(colour = "black"),
legend.position=c(0.80,0.15),
axis.title = element_text(face="bold", size=16, family="Arial"),
legend.text=element_text(size=14, family="Arial"),
legend.title = element_text(size=18, family="Arial"),
axis.text = element_text(size=10)) +
geom_segment(x=0,y=0,xend=100,yend=100, linetype="dashed", colour="gray59") +
annotate("text", x=51, y=48, angle=45, label="Ideal Trajectory", colour="gray22",family="Arial") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
prog2 = melt(prog, id.vars=c("Date"), measure.vars = c("BWA", "Sanger", "DKFZ/EMBL", "Broad", "OxoG"), na.rm=T)
ggplot(prog2, aes(x=Date, y=value, colour=variable)) +
geom_line() +
scale_x_date("", labels=date_format("%b-%Y")) + ylab("# Donors")
library(fasttime)
regen_task_instances = fread("/Users/siakhnin/Documents/workspace/pcawg-germline/analyses/freebayes-job-durations/freebayes-discovery-regenotype-job-durations.tsv")
regen_task_instances[, end_date_days := cut(as.POSIXlt(regen_task_instances$end_date), "day")]
regen_cum_sums = regen_task_instances[order(end_date_days), .N, by="end_date_days"]
regen_cum_sums$cum_sum = cumsum(regen_cum_sums$N) / 24
discovery_task_instances = fread("/Users/siakhnin/Documents/workspace/pcawg-germline/analyses/freebayes-job-durations/freebayes_discovery.tsv")
discovery_task_instances[, end_date_days := cut(as.POSIXlt(discovery_task_instances$end_date), "day")]
discovery_cum_sums = discovery_task_instances[order(end_date_days), .N, by="end_date_days"]
discovery_cum_sums$cum_sum = cumsum(discovery_cum_sums$N) / 24
del_task_instances = fread("/Users/siakhnin/Documents/workspace/pcawg-germline/analyses/freebayes-job-durations/delly_deletion_regenotype.tsv")
del_task_instances[, end_date_days := cut(as.POSIXlt(del_task_instances$end_date), "day")]
del_cum_sums = del_task_instances[order(end_date_days), .N, by="end_date_days"]
del_cum_sums$cum_sum = cumsum(del_cum_sums$N)
dup_task_instances = fread("/Users/siakhnin/Documents/workspace/pcawg-germline/analyses/freebayes-job-durations/delly_dup_regenotype.tsv")
dup_task_instances[, end_date_days := cut(as.POSIXlt(dup_task_instances$end_date), "day")]
dup_cum_sums = dup_task_instances[order(end_date_days), .N, by="end_date_days"]
dup_cum_sums$cum_sum = cumsum(dup_cum_sums$N)
get_task_sums <- function(task_instances){
task_instances[,`:=`(execution_date = fastPOSIXct(execution_date),
start_date = fastPOSIXct(start_date),
end_date = fastPOSIXct(end_date))]
min_start_date = min(task_instances$start_date)
task_instances[, hours_elapsed := ceiling(as.double(difftime(end_date, min_start_date, units="hours")))]
task_sums = task_instances[order(hours_elapsed), .N, by=.(hours_elapsed)][, task_sum := cumsum(N)]
task_sums[, hours_percent := 100 * hours_elapsed / max(hours_elapsed)][, tasks_percent := 100 * task_sum / max(task_sum)]
return(task_sums)
}
task_sums_1 = get_task_sums(regen_task_instances)
#Set initial point to 0.
task_sums_1 = rbind(task_sums_1, list(0,0,0,0,0))
task_sums_1$type = "SNV Regenotype"
task_sums_2 = get_task_sums(dup_task_instances)
#Set initial point to 0.
task_sums_2 = rbind(task_sums_2, list(0,0,0,0,0))
task_sums_2$type = "SV Duplications"
task_sums_3 = get_task_sums(del_task_instances)
#Set initial point to 0.
task_sums_3 = rbind(task_sums_3, list(0,0,0,0,0))
task_sums_3$type = "SV Deletions"
task_sums_4 = get_task_sums(discovery_task_instances)
#Set initial point to 0.
task_sums_4 = rbind(task_sums_4, list(0,0,0,0,0))
task_sums_4$type = "SNV Discovery"
task_sums = rbind(task_sums_1, task_sums_2, task_sums_3, task_sums_4)
ggplot(task_sums, aes(x=hours_percent, y=tasks_percent, color=type)) +
geom_line() +
xlab("Percent Runtime Elapsed") +
ylab("Percent Samples Complete") +
guides(col = guide_legend(title = "Pipeline")) +
theme(legend.background = element_rect(colour = "black"), legend.position=c(0.80,0.15), axis.title = element_text(face="bold", size=16), legend.text=element_text(size=14), legend.title = element_text(size=18), axis.text = element_text(size=10)) +
geom_segment(x=0,y=0,xend=100,yend=100, linetype="dashed", colour="gray59") +
annotate("text", x=45, y=40, angle=45, label="Ideal Trajectory", colour="gray22",family="Arial") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ideal_rate_sampling_percentage = 5
resample_by_quantiles <- function(num_quantiles){
regen_dt = as.data.table(do.call(rbind, transpose(approx(task_sums_1$tasks_percent, task_sums_1$hours_percent, seq(0, 100, 100 / num_quantiles)))))
setnames(regen_dt,c("bins", "elapsed_times"))
regen_dt$Pipeline = "SNV Regenotype"
dup_dt = as.data.table(do.call(rbind, transpose(approx(task_sums_2$tasks_percent, task_sums_2$hours_percent, seq(0, 100, 100 / num_quantiles)))))
setnames(dup_dt,c("bins", "elapsed_times"))
dup_dt$Pipeline = "SV Dups"
del_dt = as.data.table(do.call(rbind, transpose(approx(task_sums_3$tasks_percent, task_sums_3$hours_percent, seq(0, 100, 100 / num_quantiles)))))
setnames(del_dt,c("bins", "elapsed_times"))
del_dt$Pipeline = "SV Dels"
disc_dt = as.data.table(do.call(rbind, transpose(approx(task_sums_4$tasks_percent, task_sums_4$hours_percent, seq(0, 100, 100 / num_quantiles)))))
setnames(disc_dt,c("bins", "elapsed_times"))
disc_dt$Pipeline = "SNV Discovery"
return(rbind(regen_dt, dup_dt, del_dt, disc_dt))
}
butler_times = resample_by_quantiles(100 / ideal_rate_sampling_percentage)
butler_ideal_rates = butler_times[,.(bins, time_percent = elapsed_times - shift(elapsed_times, 1L, type="lag")), by=Pipeline][!is.na(time_percent)][,min(time_percent) / ideal_rate_sampling_percentage, by=Pipeline]
setkey(butler_ideal_rates, Pipeline)
butler_times = resample_by_quantiles(100)[,.(bins, time_percent = elapsed_times - shift(elapsed_times, 1L, type="lag")), by=Pipeline][!is.na(time_percent)]
setkey(butler_times, Pipeline)
butler_times = butler_times[butler_ideal_rates]
setnames(butler_times, "V1", "ideal_rate")
butler_times[, progress_rate := ideal_rate / time_percent, by=Pipeline]
ggplot(butler_times, aes(x=bins, y=progress_rate, color=Pipeline)) +
geom_smooth(span=0.3, se=FALSE) +
xlab("Percent Samples Completed") +
ylab("Actual Progress Rate / Target Progress Rate") +
xlim(0,100) +
ylim(0,1.5) +
guides(col = guide_legend(title = "Pipeline")) +
theme(legend.background = element_rect(colour = "black"), legend.position=c(0.80,0.85), axis.title = element_text(face="bold", size=16), legend.text=element_text(size=14), legend.title = element_text(size=18), axis.text = element_text(size=10)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
main_ideal_rates = long_times[bins %% ideal_rate_sampling_percentage == 0, .(bins, time_percent = elapsed_times - shift(elapsed_times, 1L, type="lag")), by=Pipeline][!is.na(time_percent)][,min(time_percent) / ideal_rate_sampling_percentage, by=Pipeline]
setkey(main_ideal_rates, Pipeline)
setkey(long_times, Pipeline)
main_times = long_times[,.(bins, time_percent = elapsed_times - shift(elapsed_times, 1L, type="lag")), by=Pipeline][!is.na(time_percent)][main_ideal_rates]
setnames(main_times, "V1", "ideal_rate")
main_times[, progress_rate := ideal_rate / time_percent, by=Pipeline]
ggplot(main_times[Pipeline != 'DKFZ/EMBL'], aes(x=bins, y=progress_rate, color=Pipeline)) +
geom_smooth(span=0.3, se=FALSE) +
xlab("Percent Samples Completed") +
ylab("Actual Progress Rate / Target Progress Rate") +
xlim(0,100) +
ylim(0,1.5) +
guides(col = guide_legend(title = "Pipeline")) +
theme(legend.background = element_rect(colour = "black"), legend.position=c(0.80,0.85), axis.title = element_text(face="bold", size=16), legend.text=element_text(size=14), legend.title = element_text(size=18), axis.text = element_text(size=10)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
mean_ratios = rbind(butler_times[,.(progress_rate = mean(progress_rate), pipeline="Butler"), by=bins],main_times[Pipeline != 'DKFZ/EMBL', .(progress_rate = mean(progress_rate), pipeline="PCAWG Core"), by=bins])
ggplot(mean_ratios, aes(x=bins, y=progress_rate, color=pipeline)) +
geom_smooth(span=0.3, se=FALSE) +
xlab("Percent Samples Completed") +
ylab("Mean Actual/Target Progress Rate") +
xlim(0,100) +
ylim(0,1.5) +
guides(col = guide_legend(title = "Pipeline Manager")) +
theme(legend.background = element_rect(colour = "black"), legend.position=c(0.80,0.85), axis.title = element_text(face="bold", size=16), legend.text=element_text(size=14), legend.title = element_text(size=18), axis.text = element_text(size=10)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
butler_times
butler_times[,1:3]
show(butler_times[,1:3])
show(butler_times[,1:3][bins<6])
show(butler_times[,1:3][bins<6])
show(main_times[,1:3][bins<6])
butler_ideal_rates
main_ideal_rates
mean_ratios
mean_ratios[mean(progress_rate), by=pipeline]
mean_ratios[,mean(progress_rate), by=pipeline]
long_times
